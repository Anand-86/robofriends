{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAgBeA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACI,4BAAKF,GACL,2BAAIC,MCQLK,EAfE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIK,EAAOG,GAAGR,GAAIF,KAAMO,EAAOG,GAAGV,KAAMC,MAAOM,EAAOG,GAAGT,aCQ3EW,EAfG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OAEI,yBAAKX,UAAU,OACX,2BAAOA,UAAU,mCACjBY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCGPI,EAVA,SAACC,GAChB,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCwBAC,E,YAxBX,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHC,E,+EAOLC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAMtB,OAAIG,KAAKJ,MAAMC,SACJ,sDAEJG,KAAKX,MAAMK,a,GAnBCQ,aCyDZC,G,kBApDX,aAAe,IAAD,8BACV,+CAqBJC,eAAiB,SAACC,GACV,EAAKJ,SAAS,CAAElB,YAAasB,EAAMC,OAAOC,SArB9C,EAAKX,MAAQ,CACTnB,OAAQ,GACRM,YAAa,IAJP,E,iFAQO,IAAD,OAChByB,MAAM,8CACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAInBF,MAAK,SAAAG,GACF,EAAKX,SAAS,CAAExB,OAAQmC,S,+BAWtB,IAAD,EAC2BZ,KAAKJ,MAA7BnB,EADH,EACGA,OAAQM,EADX,EACWA,YACV8B,EAAiBpC,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASlC,EAAYiC,kBAGzD,OAAQvC,EAAOyC,OAKP,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAE9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQoC,OAVlC,2C,GAnCMX,cCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.d5bb0df6.chunk.js","sourcesContent":["import React from 'react';      // We need to import React here so that our program understands JSX.\r\n\r\n// Code Change 1 (Destructuring).\r\n\r\nconst Card = ({ name, email, id }) => {  // Destructuring.\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pd3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n\r\n\r\n// More can be done to the robots at \"https://robohash.org/\"\r\n// Make sure you returning one element only. Here it's the <dive> element.\r\n\r\n// grow is the imagination\r\n// Template string used above.\r\n// {} -> Javascript expression.\r\n\r\n//-----------------------\r\n// Code Change 1 (Destructuring).\r\n\r\n// const Card = (props) => {\r\n//     return (\r\n//         <div className='tc bg-light-green dib br3 pd3 ma2 grow bw2 shadow-5'>\r\n//             <img alt='robots' src={`https://robohash.org/${props.id}?size=200x200`} />\r\n//             <div>\r\n//                 <h2 className='ma1'>{props.name}</h2>\r\n//                 <p className='ma1'>{props.email}</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Card;\r\n\r\n//-----------------------\r\n// Origanal Code\r\n\r\n// const Card = (props) => {\r\n//     const {name, email, id} = props;\r\n//     return (\r\n//         <div className='tc bg-light-green dib br3 pd3 ma2 grow bw2 shadow-5'>\r\n//             <img alt='robots' src={`https://robohash.org/${props.id}?size=200x200`} />\r\n//             <div>\r\n//                 <h2 className='ma1'>{name}</h2>\r\n//                 <p className='ma1'>{email}</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Card;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n            robots.map((user, i) => {\r\n            return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />;\r\n            })  \r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\nexport default CardList;\r\n\r\n// Always use .map instead of forEach.\r\n// For loops always use a key. Video 208 explains why.\r\n// above function is a pure function. its deterministic. It recieves an input and sends the same type of output at all times.\r\n// These components are therefore pure components. Props never change, they're just inputs you get that you never modified before.\r\n// State is something that describes your app. State is simply an object that describes your application. \r\n// The state describes the robots and whatever is entered in the searchbox.\r\n// Able to change the state. Able to change the searchbox and the robots that gets displayed.\r\n// Props are simply things that come out of state. Parent component (with State) feeds\r\n// state into a child component and in the child component it becomes a property (prop). Child cannot change the prop. \r\n\r\n\r\n    // The below error is sorted by using the robots as parameter in line 4\r\n// ./src/CardList.js\r\n//   Line 7:15:  'robots' is not defined  no-undef\r\n//   Line 7:35:  'robots' is not defined  no-undef\r\n//   Line 7:58:  'robots' is not defined  no-undef\r\n//   Line 8:15:  'robots' is not defined  no-undef\r\n//   Line 8:35:  'robots' is not defined  no-undef\r\n//   Line 8:58:  'robots' is not defined  no-undef\r\n//   Line 9:15:  'robots' is not defined  no-undef\r\n//   Line 9:35:  'robots' is not defined  no-undef\r\n//   Line 9:58:  'robots' is not defined  no-undef\r\n\r\n\r\n// the below code will now be looped above.\r\n/* <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\r\n<Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\r\n<Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/> */","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        \r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue' \r\n            type='search' \r\n            placeholder='search robots' \r\n            onChange={searchChange}\r\n            \r\n            />\r\n        </div>\r\n        \r\n        );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\nreturn (\r\n    <div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px' }}>\r\n        {props.children}\r\n    </div>\r\n\r\n)\r\n\r\n};\r\n\r\nexport default Scroll;\r\n\r\n// You learnt about Props and State. Now we introduce children.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\ncomponentDidCatch(error, info) {\r\n    this.setState({ hasError: true }) // this referes to the object it is in atm.\r\n\r\n}\r\n\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops. That's not good.</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default ErrorBoundry;\r\n\r\n// Line 13 is a new lifecycle hook in react.\r\n// props in line 6 and 7 is so we have access to the properties.\r\n// remember props is the state being used in the child component of the parent component containing the state.\r\n// line 9 is a property with a value.\r\n// what we doing here is creating a ErrorBoundry component to wrap around the CardList component to catch errors from the CardList.\r\n// line 19 is the default render. You got to render the code you just created. line 20 is a check to see if a condition is met or not.\r\n// line 23 says otherwisde just render the children of the ErrorBoundry component.\r\n// how we going to change hasError in line 9? React 16 has new lifecycle method. This cathces the error.","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';      \r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nclass App extends Component {       // Declaring a class \r\n    constructor() {\r\n        super()\r\n        this.state = {              // This is the way to use our state. Here the state is describing the app.\r\n            robots: [],\r\n            searchfield: ''\r\n    }\r\n}\r\n\r\n    componentDidMount() {       // understand later.\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => { \r\n            return response.json();\r\n\r\n        })\r\n        \r\n        .then(users => { \r\n            this.setState({ robots: users })\r\n        \r\n        });\r\n\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n            this.setState({ searchfield: event.target.value })\r\n            \r\n    };\r\n\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        });\r\n        \r\n        return !robots.length ?\r\n            <h1>Loading</h1> :\r\n        \r\n            (\r\n        \r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    \r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    }    \r\n    \r\nexport default App;\r\n\r\n// h1 was easy and there was no need to creat a component for it but you eant to create a component for the input box.\r\n\r\n/* Line 2 and 3 are sibling components that need to communicate \r\nwith each other. So the comms takes place through the parent which is App. \r\nUse State to do this. */\r\n\r\n// Up untill now we just learnt about props that we just keep passing down.\r\n// React just reads the props and just renders something.\r\n\r\n// Now CardList accesses robots from line 20.\r\n\r\n// At this stage we can comms with the parent.\r\n\r\n// Now that I have the value of the search input in the Parent component I can communicate that to the other child components.\r\n// to be used in the other child components.\r\n\r\n// App component has state, a piece of data that describes the App. Because they have state we call them smart components.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';      // Father of all children components\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}